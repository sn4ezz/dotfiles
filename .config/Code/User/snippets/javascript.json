{
  "let": {
    "prefix": "le",
    "body": "let ${1:variable} = ${2:value}"
  },
  "const": {
    "prefix": "co",
    "body": "const ${1:variable} = ${2:value}"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0, ${2:len} = ${3:arr}.length; $1 < $2; ++$1) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "for-in loop": {
    "prefix": "fori",
    "body": [
      "for (const ${1:p} in ${2:obj}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "for-of loop": {
    "prefix": "foro",
    "body": [
      "for (const ${1:v} of ${2:iter}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "while loop": {
    "prefix": "wl",
    "body": [
      "while (${1:condition}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "reverse loop": {
    "prefix": "rev",
    "body": [
      "let ${1:i} = ${2:arr}.length",
      "while ($1-- > 0) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "try-finally": {
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t$1",
      "} finally {",
      "\t$2",
      "}"
    ]
  },
  "try-catch-finally": {
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "\t$1",
      "} catch (${2:err}) {",
      "\t$3",
      "} finally {",
      "\t$4",
      "}"
    ]
  },
  "anonymous function": {
    "prefix": "f",
    "body": [
      "function (${1:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "named function": {
    "prefix": "fn",
    "body": [
      "function ${1:name}(${2:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "generator function": {
    "prefix": "gf",
    "body": [
      "function* ${1:name}(${2:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "arrow function": {
    "prefix": "af",
    "body": "(${1:params}) => ${2:statement}"
  },
  "arrow function with body": {
    "prefix": "afb",
    "body": [
      "(${1:params}) => {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "async anonymous function": {
    "prefix": "asf",
    "body": [
      "async function (${1:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "async named function": {
    "prefix": "asfn",
    "body": [
      "async function (${1:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "class": {
    "prefix": "cls",
    "body": [
      "class ${1:name} {",
      "\tconstructor(${2:params}) {",
      "\t\t${0:// ...}",
      "\t}",
      "}"
    ]
  },
  "class extends": {
    "prefix": "clx",
    "body": [
      "class ${1:name} extends ${2:parent} {",
      "\tconstructor(${3:params}) {",
      "\t\tsuper(${3:params})",
      "\t\t${0:// ...}",
      "\t}",
      "}"
    ]
  },
  "method": {
    "prefix": "meth",
    "body": [
      "${1:name}(${2:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "static method": {
    "prefix": "stat",
    "body": [
      "static ${1:name}(${2:params}) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "setter": {
    "prefix": "set",
    "body": [
      "set ${1:property}(value) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "getter": {
    "prefix": "get",
    "body": [
      "get ${1:property}() {",
      "\treturn $0",
      "}"
    ]
  },
  "import default export": {
    "prefix": "im",
    "body": "import ${1:alias} from '${2:module}'"
  },
  "import named exports": {
    "prefix": "imn",
    "body": "import { ${1:name} } from '${2:module}'"
  },
  "import all": {
    "prefix": "ima",
    "body": "import * as ${1:alias} from '${2:module}'"
  },
  "export": {
    "prefix": "ex",
    "body": "export { ${1:nameN} }"
  },
  "export variable": {
    "prefix": "exv",
    "body": "export let ${1:name} = ${2:value}"
  },
  "export function": {
    "prefix": "exf",
    "body": [
      "export const ${1:name} = (${2:params}) => {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "export default": {
    "prefix": "exd",
    "body": "export default ${1:statement}"
  },
  "console.log": {
    "prefix": "log",
    "body": "console.log($0)"
  },
  "Array.map": {
    "prefix": "map",
    "body": "${1:arr}.map(${2:v} => ${3:statement})"
  },
  "Array.reduce": {
    "prefix": "reduce",
    "body": "${1:arr}.reduce((${2:acc}, ${3:v}) => ${4:statement}, ${5:initial})"
  },
  "Array.find": {
    "prefix": "find",
    "body": "${1:arr}.find(${2:v} => ${3:statement})"
  },
  "Array.filter": {
    "prefix": "filter",
    "body": "${1:arr}.filter(${2:v} => ${3:statement})"
  },
  "Array.every": {
    "prefix": "every",
    "body": "${1:arr}.every(${2:v} => ${3:statement})"
  },
  "Array.some": {
    "prefix": "some",
    "body": "${1:arr}.some(${2:v} => ${3:statement})"
  },
  "Array.sort": {
    "prefix": "sort",
    "body": "${1:arr}.sort((${2:a}, ${3:b}) => ${4:statement})"
  },
  "create Promise": {
    "prefix": "pr",
    "body": [
      "new Promise((resolve, reject) => {",
      "\t${0:// ...}",
      "})"
    ]
  },
  "JSON.parse": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },
  "JSON.stringify": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "setInterval": {
    "prefix": "si",
    "body": [
      "setInterval(() => {",
      "\t${0:// ...}",
      "}, ${1:delay})"
    ]
  },
  "setTimeout": {
    "prefix": "st",
    "body": [
      "setTimeout(() => {",
      "\t${0:// ...}",
      "}, ${1:delay})"
    ]
  },
  "regexp loop all matches": {
    "prefix": "rematch",
    "body": [
      "let ${1:match}",
      "while (($1 = ${2:re}.exec(${3:str})) !== null) {",
      "\t${0:// ...}",
      "}"
    ]
  },
  "createElement": {
    "prefix": "ce",
    "body": "document.createElement('${1:tag}')"
  },
  "addEventListener": {
    "prefix": "ae",
    "body": [
      "${1:document}.addEventListener('${2:event}', e => {",
      "\t${0:// ...}",
      "})"
    ]
  },
  "getElementById": {
    "prefix": "gi",
    "body": "document.getElementById('${1:identifier}')"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "[...${1:document}.querySelectorAll('${2:selector}')]"
  }
}
